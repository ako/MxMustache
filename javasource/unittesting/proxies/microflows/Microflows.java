// This file was generated by Mendix Modeler 6.0.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package unittesting.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;

public class Microflows
{
	// These are the microflows for the UnitTesting module

	public static void assertTrue1(IContext context, boolean _valueToAssert)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("ValueToAssert", _valueToAssert);
			Core.execute(context, "UnitTesting.AssertTrue1", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void assertTrue2(IContext context, boolean _valueToAssert, String _message)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("ValueToAssert", _valueToAssert);
			params.put("Message", _message);
			Core.execute(context, "UnitTesting.AssertTrue2", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void iVK_ResetUnitTests(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "UnitTesting.IVK_ResetUnitTests", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void iVK_RunAllTests(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "UnitTesting.IVK_RunAllTests", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void iVK_ToggleAutoRollback(IContext context, unittesting.proxies.TestSuite _testSuite)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("TestSuite", _testSuite == null ? null : _testSuite.getMendixObject());
			Core.execute(context, "UnitTesting.IVK_ToggleAutoRollback", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void iVK_UnitTestDetails(IContext context, unittesting.proxies.UnitTest _unitTest)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("UnitTest", _unitTest == null ? null : _unitTest.getMendixObject());
			Core.execute(context, "UnitTesting.IVK_UnitTestDetails", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void oCh_TestSuiteRollback(IContext context, unittesting.proxies.TestSuite _testSuite)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("TestSuite", _testSuite == null ? null : _testSuite.getMendixObject());
			Core.execute(context, "UnitTesting.OCh_TestSuiteRollback", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void reportStep(IContext context, String _message)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Message", _message);
			Core.execute(context, "UnitTesting.ReportStep", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void rerunUnittest(IContext context, unittesting.proxies.UnitTest _unitTestRun)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("UnitTestRun", _unitTestRun == null ? null : _unitTestRun.getMendixObject());
			Core.execute(context, "UnitTesting.RerunUnittest", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void setup(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "UnitTesting.Setup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void startUnittestRun(IContext context, unittesting.proxies.TestSuite _testSuite)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("TestSuite", _testSuite == null ? null : _testSuite.getMendixObject());
			Core.execute(context, "UnitTesting.StartUnittestRun", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static boolean startup(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "UnitTesting.Startup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void tearDown(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "UnitTesting.TearDown", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static boolean test_FailingUnitTest(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "UnitTesting.Test_FailingUnitTest", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static boolean test_IsAssertionErrorCheck(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "UnitTesting.Test_IsAssertionErrorCheck", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static boolean test_ValidUnitTest(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "UnitTesting.Test_ValidUnitTest", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void test_WithoutReturn(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "UnitTesting.Test_WithoutReturn", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static void unitTestOverview(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "UnitTesting.UnitTestOverview", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}

	public static boolean uT_ValidUnitTest(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "UnitTesting.UT_ValidUnitTest", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}